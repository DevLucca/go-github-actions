name: Trigger Pipeline

on:
  workflow_dispatch:
    inputs:
      stage:
        required: true
        type: choice
        default: DEVELOPMENT
        options:
          - DEVELOPMENT
          - PRODUCTION
      context:
        required: true
        description: List of context to be deployed. Eg. "['ampli', 'fibra', 'mobi']"
        type: string

jobs:
  list-services:
    name: List Service Folders
    runs-on: ubuntu-latest
    env:
      SERVICES_FOLDERS: apis jobs
    outputs:
      services: ${{ steps.set-services.outputs.services }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - id: set-services
        name: Set Services List

        shell: bash
        run: |
          SERVICES_ARRAY=()

          for SERVICE in $SERVICES_FOLDERS; do
            for SUBFOLDER in "$SERVICE"/*; do
              if [ -d "$SUBFOLDER" ]; then
                SERVICES_ARRAY+=("$SUBFOLDER")
              fi
            done
          done

          JSON_ARRAY_VALUES=$(printf ", \"%s\"" "${SERVICES_ARRAY[@]}")
          JSON_ARRAY="["${JSON_ARRAY_VALUES:2}"]"
          echo $JSON_ARRAY

          echo "services=$(echo $JSON_ARRAY)" >> $GITHUB_OUTPUT

  test-services:
    needs: list-services
    name: Test Services
    runs-on: ubuntu-latest
    # strategy:
    #   matrix: 
    #     service: ${{ fromJSON(needs.list-services.outputs.services) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Test Service
        run: |
          for SERVICE in ${{ fromJSON(needs.list-services.outputs.services) }}; do;
            cd $SERVICE
            make test
            cd -
          done;

  build-services:
    needs: 
      - list-services

    name: Build Services
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        service: ${{ fromJSON(needs.list-services.outputs.services) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Build Services
        uses: ./.github/actions/go/build
        with:
          path: ${{ matrix.service }}
  
  deploy:
    needs: 
      - build-services
    name: Deploy
    uses: ./.github/workflows/deploy.yml
    strategy:
      matrix:
        context: ${{ fromJSON(github.event.inputs.context) }}
    with:
      context: ${{ matrix.context }}
      stage: ${{ github.event.inputs.stage }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets[format('AWS_ACCESS_KEY_ID_{0}_{1}', github.event.inputs.stage, matrix.context)] }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}_{1}', github.event.inputs.stage, matrix.context)] }}
